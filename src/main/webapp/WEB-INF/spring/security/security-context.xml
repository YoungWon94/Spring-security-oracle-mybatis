<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">


	<!-- 정적 리소스 파일들에는 보안 설정을 하지 않음 -->
	<http pattern="/include/**" security="none" /> <!-- include폴더에 있는 정적인 파일들은 보안처리 안함. header.jsp, footer.jsp, css, js 파일등은 여기 위치시킨다. -->
	<http auto-config="true" use-expressions="true" create-session="never">
		<!-- 관리자 영역 설정 -->
		<intercept-url pattern="/admin/**"
			access="hasRole('ROLE_ADMIN')" />
		<!-- 권한에 관계없이 접속 가능한 영역 -->
		<intercept-url pattern="/user/**" access="permitAll" />
		<!-- 로그인한 사용자 영역 -->
		<intercept-url pattern="/**"
			access="hasAnyRole('ROLE_USER','ROLE_TEST','ROLE_ADMIN','ROLE_GUEST')" />
		<!-- 로그인 폼, 로그인 페이지, 로그인 처리로직 주소, 로그인 성공시, 로그인 실패시, 로그인 아이디 파라미터명, 비밀번호 
			명. -->
		<form-login login-page="/user/login.do"
			login-processing-url="/user/login_check.do"
			authentication-success-handler-ref="userLoginSuccessHandler"
			authentication-failure-handler-ref="userLoginFailureHandler"
			username-parameter="userid" password-parameter="passwd" />
		<session-management>
			<!-- max-sessions="1" 동시접속 막기 error-if-maximum-exceeded="true" 로그인 세션 
				초과시 에러 옵션 expried-url="/user/login" 세션 만료시 이동할 주소 -->
			<concurrency-control max-sessions="1"
				expired-url="/user/login.do" error-if-maximum-exceeded="true" />
		</session-management>
		<!-- 로그아웃 관련 처리 -->
		<logout
			delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"
			logout-success-url="/user/login.do" logout-url="/user/logout.do"
			invalidate-session="true" />

		<!-- 접근권한이 없는 경우의 코드 -->
		<access-denied-handler ref="userDeniedHandler" />

		<!-- 자동 로그인 관련 쿠키 저장, 세션이 종료된 후에도 자동 로그인할 수 있는 기능 86400 1일, 604800 7일 -->
		<remember-me key="userKey" token-validity-seconds="86400" />
</http>
<beans:bean id="userDeniedHandler" class="com.test.security.service.UserDeniedHandler"/>
<beans:bean id="userLoginSuccessHandler" class="com.test.security.service.UserLoginSuccessHandler"/>
<beans:bean id="userLoginFailureHandler" class="com.test.security.service.UserLoginFailureHandler"/>
<!-- 로그인 인증을 처리하는 빈 -->
<beans:bean id="userService" class="com.test.security.service.UserAuthenticationService">
	<beans:constructor-arg name="sqlSession" ref="sqlSession"/>
</beans:bean>
<!-- 사용자가 입력한 비밀번호를 암호화된 비밀번호와 체크하는 로직이 포함됨 -->
<authentication-manager>
	<authentication-provider user-service-ref="userService">
		<password-encoder ref="passwordEncoder">
			<salt-source user-property="username"/>
		</password-encoder>
	</authentication-provider>
</authentication-manager>
<!-- 비밀번호 암호화 빈 -->
<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
	<beans:constructor-arg name="strength" value="256"/>
</beans:bean>

</beans:beans>
